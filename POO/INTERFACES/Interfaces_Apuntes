

INTERFACES CONCEPTO
___________________

Una interfaces marca las directrices de las clases que las implementan. 
Es una colección de métodos abstractas y propiedades constantes en las que se especifica quése debe hacer pero no cómo se debe hacer.
Serán las clases que implementan las interfaces las que establezcan la lógica de los métodos que existan dentro de esa interfaz, y 
estaremos marcando las directrices que deben de cumplir las clases.

Si declaramos una interfaz con dos métodos, podemos decir que esos métodos son las directrices a seguir de aquella clase
que implemente esa interfaz.

Una clase en java sólo puede heredar de una clase, no puede heredar de varias clases a la vez.

CREAR INTERFACES PROPIAS:
________________________

Por ejemplo tenemos una clase personas, y tenemos dos clases empreados y alumnos que heredan de personas.
En personas tenemos el método Public abstract String getDescripcion() , que empleados y alumnos al heredar de Personas
pueden implementar ese método al heredar de Personas. 
Ambas clases son capaces de darnos una descripción de empleado y alumno.
Tenemos una clase jefes que hereda de empleados, pero no hereda de personas directamente, hereda getDescripcion().

Quiero que mi programa me diga qué cargo tiene un jefe y que pueda modificar ese cargo. Con lo cual en Personas, se establecen los 
métodos:

Public abstract void setCargo(string cargo);
Public abstract String getCargo();

Al heredar jefe de Empleados coge los métodos de Persona, ya que Empleados hereda de Persona.

Cuando implementamos estos métodos en la clase abstracta, obligamos a que Empleados y Jefes lo tengan, ya que se obliga a que se sobreescriban los métodos. 
Si pusiéramos estos métodos directamente en Jefe no obligamos a que tenga el método.

Un método normal no obliga a que se desarrolle un método, con lo cual tiene que ser abstracto.

El problema es que no queremos que el cargo lo tenga Empleados, sino que queremos que el cargo sólo lo tengan los Jefes, con lo cual habría que crear una interfaz que contenga
estos métodos abstractos y que jefes herede de esta interfaz. Ya que no se puede crear clases multiples que hereden.

Crearíamos una interfaz llamada Parajedes con los dos métodos:

Public abstract void setCargo(String cargo);
Public abstract String getCargo();

Y la clase Jefes implementa esa interfaz.

La Interfaz debe contener métodos abstractos que obligan a sobreescribir ese método a la clase Jefes.

Y Jefes llama a la interfaz de la siguiente manera:

Class Jefes extends Empleados implements Parajefes

implements se usa cuando quieres implementar una o varias interfaces.
Con las interfaces se pueden implementar todas las que queramos.
Lo contrario de la herenda que no deja poner extends varias veces (una clase solo puede heredar de otra, no admite herencia múltiple).
Una interfaz de java sólo debe contener métodos abstractos y constantes.
Las interfaces se almacenan en un fichero.class como las clases.
No se pueden instanciar (no uso de new). No podemos llamar al constructor con el operador new ya que no tiene constructor. Como en las clases abstractas que no pueden
instanciarse ya que no tienen objeto. Se instancias sus clases heredadas pero no la clase abstracta.
Todos sus métodos son public y abstract. No se implementan.
No tienen variables. Si constantes.

Para definir una clase sería con public para que sea accesible a todas las clases interfaces y el nombre de la interfaz:

public interface ParaJefes{
  public abstract void setCargo(String cargo);
  public abstract String getCargo();
}
Solo debe tener en su interior métodos abstractos y constantes.
Tenemos un método para establecer el cargo del jefe y el método getCargo que nos va a deolver el cargo establecido en el método anterior.

Para implementar la interfaz sería con la palabra reservada implements y el nombre de la interfaz:
class Jefes extends Empleados implements ParaJefes, Interfaz2,Interfaz3{
Podemos implementar varias interfaces.


INTERFACES DE LA API
____________________

Podemos introducir en la clase test los objetos en un arreglo, y ordenarlo de menor a mayor por sueldo.
El problema es que hace falta que hace falta una interfaz de la API para poder ordenar un arreglo de objetos.
La interfaz que hace falta es Comparable que se llama en la clase que queremos ordenar.

class Empleados extends Persona implements Comparable{

Es una clase ya predefinida, no hay que desarrollarla, solo implementarla en la clase donde queremos usarla.
Esta interfaz sobreescribe en la clase donde la vamos a usar el método compareTo.
Este método lo que hace es comparar el objetos de la clase Empleados al que llamamos con otros objetos de la misma clase.

@Override
	public int compareTo(Object o) {
		// Método que devulve negativo si el objeto es mayor, 0 si son iguales y positivo si el objeto que comparamos es mayor
		//Transformo un objeto de tipo Object al de Empleados
		Empleados otroEmpleado=(Empleados)o;
		//Comparamos por sueldo
		if(this.sueldo<otroEmpleado.sueldo) return -1;
		
		if(this.sueldo>otroEmpleado.sueldo) return 1;
		
		return 0;
	}
 
  Para ello primero hay que realizar una transformación del Object que sobreescribe eclipse a un objeto de tipo Empleados.
  Luego se compara el sueldo  con this de nuestro objeto con el del otro objeto de tipo empleado, en caso de que el sueldo de nuestro objeto sea menor
  que el otro devuelve negativo, si el sueldo de nuestro objeto es mayor devuelve positivo y si es igual devuelve 0.
  
  Con este método implementado ya se podría en test ordenar el arreglo con Arrays.sort();
  Ordenaría de menor a mayor , con lo cual si tuviéramos que decir en el programa cuál es el sueldo mayor sería la útima posición y el sueldo mayor la primera posición.
  
  public static void main(String[] args) {
		// Creación de objetos en array de objetos
		Empleados losEmpleados[]=new Empleados[5];
		losEmpleados[0]=new Empleados("Juan",new Date(6556546),2500.0);
		losEmpleados[1]=new Empleados("Maria", new Date(6546546),1500.0);
		losEmpleados[2]=new Empleados ("Ana",new Date(6546546),3500.0);
		losEmpleados[3]=new Empleados("Sandra",new Date(6546546),6000.0);
		losEmpleados[4]=new Empleados("Antonio",new Date(6546546),2100);
		//Al implementar en la clase Empleados la interfaz Comparable y el método CompareTo que compara los sueldo
		//podemos ordenar el array de menor a mayor
		Arrays.sort(losEmpleados);
		//Se recorren los objetos que se encuentran dentro del array 
		for(Empleados e:losEmpleados) {
			System.out.println(e.getDescription());
		}
	}
  
También se nos puede pedir ordenar los objetos por un atributo alfabéticamente:

Para ello hay que implementar la interfaz Comparable

Public class Persona implements Comparable <Persona>{
	private int idPersona;
	private String nombre;
	private int altura;
	
	Public Persona(int idPersona, String nombre, int altura){
		this.idPersona=idPersona;
		this.nombre=nombre;
		this.altura=altura;
	}
	//Getter y Setter
	public int getIdPersona(){
		return idPersona;
	}
	public String getNombre(){
		return nombre;
	}
	public int getAltura(){
		return altura;
	}
	public void setIdPersona(int idPersona){
		this.idPersona=idPersona;
	}
	public void setNombre(String nombre){
		this.nombre=nombre;
	}
	public void setAltura(int altura){
		this.altura=altura;
	}
	@Override
	public String toString(){
		return "Persona-> ID: "+idPersona+" Nombre: "+nombre+" Altura: "+altura;
	}
	
	Hay que sobreescribir el método compareTo
	
	@Override
	
	public int compareTo(Persona o){
		return this.nombre.compareTo(o.nombre);
	}



